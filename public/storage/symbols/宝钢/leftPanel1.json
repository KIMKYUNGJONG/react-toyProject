{
  "modified": "Thu Jul 04 2019 14:40:12 GMT+0900 (한국 표준시)",
  "background": "rgb(61,61,61)",
  "dataBindings": [
    {
      "attr": "temperature",
      "valueType": "String",
      "name": "温度"
    },
    {
      "attr": "DCScreen",
      "valueType": "String",
      "name": "直流屏"
    },
    {
      "attr": "switchGear",
      "valueType": "String",
      "name": "开关柜"
    },
    {
      "attr": "transformer",
      "valueType": "String",
      "name": "变压器"
    },
    {
      "attr": "humidity",
      "valueType": "String",
      "name": "湿度"
    },
    {
      "attr": "superPower",
      "valueType": "String",
      "name": "上级电源"
    },
    {
      "attr": "powerSupply",
      "valueType": "String",
      "name": "供电方式"
    },
    {
      "attr": "mainChangeModel",
      "valueType": "Multiline",
      "name": "主变型号"
    },
    {
      "attr": "voltageLevel",
      "valueType": "Multiline",
      "name": "电压等级"
    },
    {
      "attr": "panelTitle",
      "valueType": "Multiline",
      "name": "面板标题"
    },
    {
      "attr": "aDifferentSound",
      "valueType": "String",
      "name": "A 段异音"
    },
    {
      "attr": "bDifferentSound",
      "valueType": "String",
      "name": "B 段异音"
    }
  ],
  "width": 239,
  "height": 830,
  "fitSize": true,
  "clip": true,
  "attachStyle": "close",
  "comps": [
    {
      "type": "shape",
      "background": "rgba(20,20,61,0.40)",
      "borderColor": "rgb(41,155,217)",
      "rotation": 3.14159,
      "onUp": "__ht__function(event, data, view, point, width, height) {\nif(window.G){\n    G.event.fire({\n        kind: 'showCabinetInfo'\n    });\n}\n}",
      "points": [
        23.45778,
        12.28489,
        208.5617,
        12.28528,
        215.22272,
        17.13726,
        215.22266,
        46.03939,
        212.54637,
        49.84269,
        212.54637,
        99.65711,
        215.22253,
        104.03915,
        215.22246,
        131.4114,
        208.5613,
        137.31812,
        150.18767,
        137.31799,
        143.89486,
        131.41121,
        23.45738,
        131.41095,
        16.64118,
        125.50398,
        16.64123,
        104.03854,
        20.18359,
        99.65711,
        20.18359,
        49.84269,
        16.64135,
        46.03878,
        16.64142,
        17.13664,
        23.45778,
        12.28489
      ]
    },
    {
      "type": "shape",
      "background": "rgb(29,110,122)",
      "fillRule": "evenodd",
      "rotation": 6.28319,
      "points": [
        108.93581,
        8.63057,
        116.30006,
        15.93869,
        95.97755,
        15.93879,
        87.93658,
        8.63057
      ]
    },
    {
      "type": "shape",
      "background": "rgb(29,110,122)",
      "fillRule": "evenodd",
      "opacity": 0.7,
      "rotation": 6.28319,
      "points": [
        135.36929,
        8.63057,
        142.73353,
        15.93869,
        121.89623,
        15.93869,
        114.37006,
        8.63057
      ]
    },
    {
      "type": "shape",
      "background": "rgb(29,110,122)",
      "fillRule": "evenodd",
      "opacity": 0.4,
      "rotation": 6.28319,
      "points": [
        161.80276,
        8.63057,
        169.167,
        15.93869,
        148.32971,
        15.93869,
        140.80354,
        8.63057
      ]
    },
    {
      "type": "shape",
      "borderWidth": 2,
      "borderColor": "rgba(41,155,217,0.51)",
      "borderCap": "round",
      "borderJoin": "bevel",
      "pixelPerfect": true,
      "scaleY": -1,
      "rotation": -1.5708,
      "points": [
        -367.35816,
        445.38059,
        -19.40608,
        445.37931,
        -11.40211,
        435.82306,
        36.21953,
        435.82289,
        5.60289,
        415.28446,
        208.66083,
        415.28372,
        235.76543,
        445.37837,
        452.25023,
        445.37758,
        452.24999,
        381.51519
      ],
      "segments": [
        1,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2
      ]
    },
    {
      "type": "rect",
      "borderColor": "#979797",
      "movable": false,
      "editable": false,
      "displayName": "返回首页",
      "rect": [
        14.12264,
        8.6305,
        249.95693,
        28.58417
      ],
      "onUp": "__ht__function(event, data, view, point, width, height) {\nif(window.G){\n    G.event.fire({\n        kind: 'backHome'\n    });\n}\n}"
    },
    {
      "type": "shape",
      "background": "rgba(20,20,61,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "points": [
        62.26628,
        460.19324,
        49.70101,
        445.87406,
        49.70101,
        245.96051,
        209.53476,
        245.96051,
        220.53001,
        265.17216,
        220.53001,
        460.19324
      ]
    },
    {
      "type": "shape",
      "background": "rgba(20,20,61,0.40)",
      "borderColor": "rgb(41,155,217)",
      "pixelPerfect": true,
      "rotation": 3.14159,
      "points": [
        37.55896,
        481.42351,
        219.12069,
        481.42412,
        228.1206,
        489.39373,
        228.12053,
        536.86624,
        224.92472,
        543.11322,
        224.92472,
        624.93472,
        228.12037,
        632.13235,
        228.12007,
        676.33104,
        213.62463,
        686.79387,
        41.97133,
        686.79345,
        28.61094,
        676.33054,
        28.61107,
        632.13126,
        32.84109,
        624.93465,
        32.84109,
        543.11315,
        28.61122,
        536.86515,
        28.61141,
        489.39323,
        37.55896,
        481.42351
      ]
    },
    {
      "type": "text",
      "text": "온도",
      "color": "rgb(247,247,247)",
      "font": "18px Godo",
      "pixelPerfect": true,
      "rect": [
        60.13008,
        261.43816,
        74.98543,
        15.20288
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@temperature",
        "value": "35℃"
      },
      "color": "#32D3EB",
      "font": "20px arial, sans-serif",
      "pixelPerfect": true,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        122.47207,
        303.93945,
        56.73494,
        22.88468
      ]
    },
    {
      "type": "shape",
      "background": "rgba(215,215,222,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "rotation": 3.14159,
      "points": [
        60.65333,
        351.39987,
        60.65333,
        349.39987,
        214.65333,
        349.39987,
        214.65333,
        351.39987
      ]
    },
    {
      "type": "shape",
      "background": "rgb(16,82,92)",
      "borderColor": "rgb(97,3,3)",
      "fillRule": "evenodd",
      "pixelPerfect": true,
      "displayName": "标题",
      "rotation": -1.5708,
      "points": [
        116.87013,
        342.57363,
        116.87013,
        354.96796,
        103.01012,
        368.27532,
        -64.16702,
        368.27532,
        -76.69242,
        354.96796,
        -76.69242,
        342.57363
      ]
    },
    {
      "type": "shape",
      "background": "rgb(29,110,122)",
      "fillRule": "evenodd",
      "pixelPerfect": true,
      "rotation": -1.5708,
      "points": [
        36.08484,
        453.57459,
        43.40666,
        460.8406,
        22.6894,
        460.8406,
        15.20658,
        453.57459
      ]
    },
    {
      "type": "shape",
      "background": "rgb(29,110,122)",
      "fillRule": "evenodd",
      "pixelPerfect": true,
      "scaleX": -1,
      "rotation": -1.5708,
      "points": [
        36.08484,
        250.00835,
        43.40666,
        257.27437,
        22.6894,
        257.27437,
        15.20658,
        250.00835
      ]
    },
    {
      "type": "shape",
      "background": "rgba(20,20,61,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "points": [
        35.67284,
        229.36231,
        19.75377,
        215.23621,
        19.75377,
        145.30843,
        201.07865,
        145.30843,
        215.00863,
        164.88452,
        215.00863,
        229.36231,
        35.67284,
        229.36231
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@DCScreen",
        "value": "200Ah"
      },
      "align": "center",
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        148.98791,
        533.30137,
        51.83457,
        24.14353
      ]
    },
    {
      "type": "text",
      "text": "직류 스크린",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "14px Godo",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "rect": [
        144.63632,
        499.87387,
        60.97208,
        18.49711
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@switchGear",
        "value": "19면"
      },
      "align": "center",
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        68.29373,
        633.54897,
        38.31124,
        22.40088
      ]
    },
    {
      "type": "text",
      "text": "스위치",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "14px Godo",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "rect": [
        53.59637,
        595.56708,
        68.68039,
        22.91678
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@transformer",
        "value": "2대"
      },
      "align": "center",
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        163.90258,
        633.54897,
        24.33298,
        22.40088
      ]
    },
    {
      "type": "text",
      "text": "변압기",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "14px Godo",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "rect": [
        142.73355,
        595.56708,
        68.68039,
        22.91678
      ]
    },
    {
      "type": "image",
      "name": {
        "cache": {
          "width": 100,
          "height": 100,
          "snapshotURL": "",
          "func": "__ht__function(g, rect, comp, data, view) {\nif (!data) return;\nvar content =  comp.getValue('content'),\n    autoScale = comp.getValue('autoScale'),\n    fontSize = comp.getValue('fontSize'),\n    fontFamily = comp.getValue('fontFamily'),\n    wordBreak = comp.getValue('wordBreak'),\n    vAlign = comp.getValue('vAlign'),\n    color = comp.getValue('color'),\n    lineHeight = comp.getValue('lineHeight'),\n    textAlign = comp.getValue('textAlign'),\n    padding = comp.getValue('padding'),\n    background = comp.getValue('background'),\n    fillContent = comp.getValue('fillContent');\n\nif (background) {// 画背景\n    g.save();\n    g.fillStyle = background;\n    g.beginPath();\n    g.rect(rect.x, rect.y, rect.width, rect.height);\n    g.fill();\n    g.restore();\n}\n\nif (!content) return;\n\ng.save();\ng.translate(rect.x, rect.y);\n// padding and font\nvar font = fontSize + 'px ' + fontFamily,\n    paddingTop, paddingRight, paddingBottom, paddingLeft, plist;\n\nif (padding.match(/[^0-9\\s\\.]/g)) {\n    paddingTop = paddingRight = paddingBottom = paddingLeft = 0;\n} else {\n    padding = padding.replace(/\\s\\s+/g, ' ');\n    padding = padding.replace(/^\\s+|\\s+$/g,'');\n    plist = padding.split(' ');\n    plist = plist.length > 0 ? plist : [0];\n\n    switch(plist.length) {\n        case 1:\n            paddingTop = paddingRight = paddingBottom = paddingLeft = parseFloat(plist[0]);\n            break;\n        case 2:\n            paddingTop = paddingBottom = parseFloat(plist[0]);\n            paddingRight = paddingLeft = parseFloat(plist[1]);\n            break;\n        case 3:\n            paddingTop = parseFloat(plist[0]);\n            paddingRight = paddingLeft = parseFloat(plist[1]);\n            paddingBottom = parseFloat(plist[2]);\n            break;\n        default:\n            paddingTop = parseFloat(plist[0]);\n            paddingRight = parseFloat(plist[1]);\n            paddingBottom = parseFloat(plist[2]);\n            paddingLeft = parseFloat(plist[3]);\n            break;\n    }\n}\n\nvar fx = paddingLeft, fy = paddingTop,\n    width = parseInt(rect.width) - paddingLeft - paddingRight,\n    height = parseInt(rect.height) - paddingTop - paddingBottom;\n\nvar getTextSize = function(font, text){\n    var g = document ? ht.Default.createCanvas().getContext(\"2d\") : null;\n    return function(font, text) {\n        g.font = font;\n        return g.measureText(text);\n    };\n}();\n\nvar replacePos = function (str, pos, text) {\n    var str = str.substring(0, pos-1) + text + str.substring(pos - 1,str.length);\n    return str;\n}\n\nvar breakText = function(text, width, font) {\n    var list = [],\n        preCut = 0,\n        i = 1;\n    for (len = text.length; i <= len; i++) {\n        var temp = text.substring(preCut, i),\n            size = getTextSize(font, temp);\n        if (size.width > width) {\n            if (i - 1 === preCut) {\n                list.push(text.substring(preCut, i));\n                preCut = i;\n            }\n            else {\n                list.push(text.substring(preCut, i - 1));\n                preCut = i - 1;\n            }\n        }\n    }\n\n    if (preCut !== i - 1) {\n        list.push(text.substring(preCut, i));\n    }\n    return list;\n};\n\nvar formatText = function(text, style) {\n    var list = [],\n        font = style.font,\n        height = style.height,\n        width = style.width,\n        wordBreak = style.wordBreak,\n        textList = text.split('\\n');\n\n    for (var j = 0, listLen = textList.length; j < listLen; j++) {\n        var subText = textList[j];\n        if (subText === '') {\n            subText = ' ';\n        }\n        if (wordBreak) {\n            Array.prototype.push.apply(list, breakText(subText, width, font));\n        } else {\n            var code = '',\n                array, codeArray, tempStr, size, subList, preSubstr = '';\n            for(var x = 0; x < subText.length; x++){\n                var char = subText.charAt(x);\n                if(char.match(/[a-z|A-Z]/g)) {\n                    code += '1';\n                }else {\n                    code += '2';\n                }\n            }\n\n            code = code.replace(/21/g,'2_1');\n            code = code.replace(/12/g,'1_2');\n\n            for(var i = 0; i < code.length; i++){\n                var char = code.charAt(i);\n                if(char.match(/\\_/g)) {\n                    subText = replacePos(subText, i + 1, '|');\n                }\n            }\n            array = subText.split('|'),\n            codeArray = code.split('_');\n\n            // 判断第一个是否\n            for (var i = 0, len = array.length; i < len; i++) {\n                tempStr = preSubstr + array[i];\n                size = getTextSize(font, tempStr);\n\n                if (codeArray[i][0] === '1') {// 英文单词\n\n                    if (size.width - 2 > width) {// 超出\n                        if (preSubstr) {// 有前串剩余\n                            list.push(preSubstr);\n                            preSubstr = '';\n                            i --;// 清空前串后继续执行一次当前循环\n                        } else {// 当前一行装不下一个单词的情况\n                            subList = breakText(array[i], width, font);\n                            Array.prototype.push.apply(list, subList.slice(0, subList.length - 1));\n                            preSubstr = subList[subList.length - 1];\n                        }\n                    } else if(size.width === width) {\n                        list.push(tempStr);\n                        preSubstr = '';\n                    } else {\n                        preSubstr = tempStr;\n                    }\n                } else {// 普通串\n                    if (size.width > width) {\n                        subList = breakText(tempStr, width, font);\n                        Array.prototype.push.apply(list, subList.slice(0, subList.length - 1));\n                        preSubstr = subList[subList.length - 1];\n                    } else {\n                        preSubstr = tempStr;\n                    }\n                }\n            }\n            if (preSubstr) {// 加入最后空余串\n                list.push(preSubstr);\n            }\n        }\n    }\n    return list;\n};\n\n\nvar tl = formatText(content, {\n    font: font,\n    width: width,\n    height: height,\n    wordBreak: wordBreak\n});\nif (autoScale && tl.length * lineHeight > height) {\n    // find cache\n    var cacheKey = '' + width + '-' +height + font + lineHeight;\n    var cacheMap = data.a('cacheScaleMap');\n    var i = 0,\n        lineOffset = 0,\n        maxTry = 4,\n        scale, rs,\n        tempList, rlh, preRS, scaledWidth, scaledHeight;\n    vAlign = 'top';\n    // use cache\n    if (cacheMap && cacheMap.key === cacheKey && cacheMap.content === content) {\n        scale = cacheMap.scale;\n        rs = 1 / scale;\n        rlh = scale * lineHeight;\n\n        scaledWidth = parseInt(width * rs);\n        scaledHeight = parseInt(height * rs);\n\n        g.scale(scale, scale);\n\n        tl = formatText(content, {\n            font: font,\n            width: scaledWidth,\n            height: height,\n            wordBreak: wordBreak\n        });\n    }\n    else {\n        cacheMap = {\n            key: cacheKey,\n            content: content\n        };\n\n        while (i < maxTry) {// try\n            scale = Math.sqrt(height / ((tl.length + lineOffset) * lineHeight));\n            rs = 1 / scale;\n            rlh = scale * lineHeight;\n\n            scaledWidth = parseInt(width * rs);\n            scaledHeight = parseInt(height * rs);\n\n            if (preRS) {\n                g.scale(preRS, preRS);\n            }\n\n            g.scale(scale, scale);\n\n            tempList = formatText(content, {\n                font: font,\n                width: scaledWidth,\n                height: height,\n                wordBreak: wordBreak\n            });\n            if (tempList.length * rlh > height) {\n                lineOffset += Math.ceil((tempList.length * rlh - height) / rlh + 0.5);\n                preRS = rs;\n            }\n            else if (tempList.length * rlh < height && Math.abs(height - tempList.length * rlh) > rlh * 2) {\n                lineOffset -= Math.floor((height - tempList.length * rlh) / rlh);\n                preRS = rs;\n            }\n            else {\n                tl = tempList;\n                break;\n            }\n            if (++i === maxTry) {\n                tl = tempList;\n            }\n        }\n        cacheMap.scale = scale;\n        data.a('cacheScaleMap', cacheMap);\n    }\n\n    fx = paddingLeft * rs;\n    fy = paddingTop * rs;\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, scaledWidth, rlh, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\nelse if (fillContent && (tl.length + 1) * lineHeight < height) {\n    // find cache\n    var cacheKey = '' + width + '-' + height + font + lineHeight;\n    var cacheMap = data.a('cacheScaleMap');\n    var i = 0,\n        lineOffset = 0,\n        maxTry = 4,\n        scale, rs,\n        tempList, rlh, preRS, scaledWidth, scaledHeight;\n    vAlign = 'top';\n    // use cache\n    if (cacheMap && cacheMap.key === cacheKey && cacheMap.content === content) {\n        scale = cacheMap.scale;\n        rs = 1 / scale;\n        rlh = scale * lineHeight;\n\n        scaledWidth = parseInt(width * rs);\n        scaledHeight = parseInt(height * rs);\n\n        g.scale(scale, scale);\n\n        tl = formatText(content, {\n            font: font,\n            width: scaledWidth,\n            height: height,\n            wordBreak: wordBreak\n        });\n    }\n    else {\n        var currScale = Math.sqrt(height / (tl.length * lineHeight));\n        cacheMap = {\n            key: cacheKey,\n            content: content\n        };\n\n        while (i < maxTry) {// try\n            scale = currScale;\n            rs = 1 / scale;\n            rlh = scale * lineHeight;\n\n            scaledWidth = parseInt(width * rs);\n            scaledHeight = parseInt(height * rs);\n\n            if (preRS) {\n                g.scale(preRS, preRS);\n            }\n\n            g.scale(scale, scale);\n\n            tempList = formatText(content, {\n                font: font,\n                width: scaledWidth,\n                height: height,\n                wordBreak: wordBreak\n            });\n            if (tempList.length * rlh > height || (tempList.length * rlh < height && height - tempList.length * rlh > rlh * 0.8)) {\n                preRS = rs;\n                currScale *= Math.sqrt(height / (tempList.length * rlh));\n            }\n            else {\n                tl = tempList;\n                break;\n            }\n            if (++i === maxTry) {\n                tl = tempList;\n            }\n        }\n        cacheMap.scale = scale;\n        data.a('cacheScaleMap', cacheMap);\n    }\n\n    fx = paddingLeft * rs;\n    fy = paddingTop * rs;\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, scaledWidth, rlh, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\nelse {\n    // set y by vAlign\n    if (vAlign === 'middle') {\n        fy += (height - tl.length * lineHeight) / 2;\n    } else if (vAlign === 'bottom') {\n        fy += (height - tl.length * lineHeight);\n    }\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, width, lineHeight, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\ng.restore();\n}",
          "properties": {
            "content": {
              "valueType": "Multiline",
              "defaultValue": "HT 2D Editor",
              "name": "TBContent"
            },
            "autoScale": {
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "TBAutoScale"
            },
            "wordBreak": {
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "TBWordBreak"
            },
            "fontSize": {
              "valueType": "PositiveNumber",
              "defaultValue": 14,
              "name": "TBFontSize"
            },
            "fontFamily": {
              "valueType": "String",
              "defaultValue": "sans-serif, arial",
              "name": "TBFontFamily"
            },
            "textAlign": {
              "valueType": "Align",
              "defaultValue": "left",
              "name": "TBTextAlign"
            },
            "vAlign": {
              "valueType": "VAlign",
              "defaultValue": "middle",
              "name": "TBVerticalAlign"
            },
            "color": {
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "name": "TBColor"
            },
            "lineHeight": {
              "valueType": "PositiveNumber",
              "defaultValue": 18,
              "name": "TBLineHeight"
            },
            "background": {
              "valueType": "Color",
              "defaultValue": null,
              "name": "TBBackground"
            },
            "padding": {
              "valueType": "String",
              "defaultValue": "0",
              "name": "TBPadding",
              "description": "like CSS"
            },
            "fillContent": {
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "占整个矩形"
            }
          }
        },
        "width": {
          "value": 100,
          "isSafeFunc": true,
          "func": "__ht__function(i){return i._width}"
        },
        "height": {
          "value": 100,
          "isSafeFunc": true,
          "func": "__ht__function(i){return i._height}"
        },
        "comps": [
          {
            "type": {
              "func": "__ht__function(i){return i.compType}",
              "isSafeFunc": true
            },
            "content": {
              "func": "style@content"
            },
            "autoScale": {
              "func": "style@autoScale"
            },
            "wordBreak": {
              "func": "style@wordBreak"
            },
            "fontSize": {
              "func": "style@fontSize"
            },
            "fontFamily": {
              "func": "style@fontFamily"
            },
            "textAlign": {
              "func": "style@textAlign"
            },
            "vAlign": {
              "func": "style@vAlign"
            },
            "color": {
              "func": "style@color"
            },
            "lineHeight": {
              "func": "style@lineHeight"
            },
            "background": {
              "func": "style@background"
            },
            "padding": {
              "func": "style@padding"
            },
            "fillContent": {
              "func": "style@fillContent"
            },
            "getValue": "__ht__function(V){var d=u(E,V);if(d===M&&g.properties){var f=g.properties[V];f&&(d=f.defaultValue)}return d}",
            "getColor": "__ht__function(P){return A(E.getValue(P))}"
          }
        ]
      },
      "pixelPerfect": true,
      "displayName": "地址",
      "rect": [
        88.16539,
        301.65098,
        150.83461,
        67.348
      ]
    },
    {
      "type": "image",
      "name": {
        "cache": {
          "width": 100,
          "height": 100,
          "snapshotURL": "",
          "func": "__ht__function(g, rect, comp, data, view) {\nif (!data) return;\nvar content =  comp.getValue('content'),\n    autoScale = comp.getValue('autoScale'),\n    fontSize = comp.getValue('fontSize'),\n    fontFamily = comp.getValue('fontFamily'),\n    wordBreak = comp.getValue('wordBreak'),\n    vAlign = comp.getValue('vAlign'),\n    color = comp.getValue('color'),\n    lineHeight = comp.getValue('lineHeight'),\n    textAlign = comp.getValue('textAlign'),\n    padding = comp.getValue('padding'),\n    background = comp.getValue('background'),\n    fillContent = comp.getValue('fillContent');\n\nif (background) {// 画背景\n    g.save();\n    g.fillStyle = background;\n    g.beginPath();\n    g.rect(rect.x, rect.y, rect.width, rect.height);\n    g.fill();\n    g.restore();\n}\n\nif (!content) return;\n\ng.save();\ng.translate(rect.x, rect.y);\n// padding and font\nvar font = fontSize + 'px ' + fontFamily,\n    paddingTop, paddingRight, paddingBottom, paddingLeft, plist;\n\nif (padding.match(/[^0-9\\s\\.]/g)) {\n    paddingTop = paddingRight = paddingBottom = paddingLeft = 0;\n} else {\n    padding = padding.replace(/\\s\\s+/g, ' ');\n    padding = padding.replace(/^\\s+|\\s+$/g,'');\n    plist = padding.split(' ');\n    plist = plist.length > 0 ? plist : [0];\n\n    switch(plist.length) {\n        case 1:\n            paddingTop = paddingRight = paddingBottom = paddingLeft = parseFloat(plist[0]);\n            break;\n        case 2:\n            paddingTop = paddingBottom = parseFloat(plist[0]);\n            paddingRight = paddingLeft = parseFloat(plist[1]);\n            break;\n        case 3:\n            paddingTop = parseFloat(plist[0]);\n            paddingRight = paddingLeft = parseFloat(plist[1]);\n            paddingBottom = parseFloat(plist[2]);\n            break;\n        default:\n            paddingTop = parseFloat(plist[0]);\n            paddingRight = parseFloat(plist[1]);\n            paddingBottom = parseFloat(plist[2]);\n            paddingLeft = parseFloat(plist[3]);\n            break;\n    }\n}\n\nvar fx = paddingLeft, fy = paddingTop,\n    width = parseInt(rect.width) - paddingLeft - paddingRight,\n    height = parseInt(rect.height) - paddingTop - paddingBottom;\n\nvar getTextSize = function(font, text){\n    var g = document ? ht.Default.createCanvas().getContext(\"2d\") : null;\n    return function(font, text) {\n        g.font = font;\n        return g.measureText(text);\n    };\n}();\n\nvar replacePos = function (str, pos, text) {\n    var str = str.substring(0, pos-1) + text + str.substring(pos - 1,str.length);\n    return str;\n}\n\nvar breakText = function(text, width, font) {\n    var list = [],\n        preCut = 0,\n        i = 1;\n    for (len = text.length; i <= len; i++) {\n        var temp = text.substring(preCut, i),\n            size = getTextSize(font, temp);\n        if (size.width > width) {\n            if (i - 1 === preCut) {\n                list.push(text.substring(preCut, i));\n                preCut = i;\n            }\n            else {\n                list.push(text.substring(preCut, i - 1));\n                preCut = i - 1;\n            }\n        }\n    }\n\n    if (preCut !== i - 1) {\n        list.push(text.substring(preCut, i));\n    }\n    return list;\n};\n\nvar formatText = function(text, style) {\n    var list = [],\n        font = style.font,\n        height = style.height,\n        width = style.width,\n        wordBreak = style.wordBreak,\n        textList = text.split('\\n');\n\n    for (var j = 0, listLen = textList.length; j < listLen; j++) {\n        var subText = textList[j];\n        if (subText === '') {\n            subText = ' ';\n        }\n        if (wordBreak) {\n            Array.prototype.push.apply(list, breakText(subText, width, font));\n        } else {\n            var code = '',\n                array, codeArray, tempStr, size, subList, preSubstr = '';\n            for(var x = 0; x < subText.length; x++){\n                var char = subText.charAt(x);\n                if(char.match(/[a-z|A-Z]/g)) {\n                    code += '1';\n                }else {\n                    code += '2';\n                }\n            }\n\n            code = code.replace(/21/g,'2_1');\n            code = code.replace(/12/g,'1_2');\n\n            for(var i = 0; i < code.length; i++){\n                var char = code.charAt(i);\n                if(char.match(/\\_/g)) {\n                    subText = replacePos(subText, i + 1, '|');\n                }\n            }\n            array = subText.split('|'),\n            codeArray = code.split('_');\n\n            // 判断第一个是否\n            for (var i = 0, len = array.length; i < len; i++) {\n                tempStr = preSubstr + array[i];\n                size = getTextSize(font, tempStr);\n\n                if (codeArray[i][0] === '1') {// 英文单词\n\n                    if (size.width - 2 > width) {// 超出\n                        if (preSubstr) {// 有前串剩余\n                            list.push(preSubstr);\n                            preSubstr = '';\n                            i --;// 清空前串后继续执行一次当前循环\n                        } else {// 当前一行装不下一个单词的情况\n                            subList = breakText(array[i], width, font);\n                            Array.prototype.push.apply(list, subList.slice(0, subList.length - 1));\n                            preSubstr = subList[subList.length - 1];\n                        }\n                    } else if(size.width === width) {\n                        list.push(tempStr);\n                        preSubstr = '';\n                    } else {\n                        preSubstr = tempStr;\n                    }\n                } else {// 普通串\n                    if (size.width > width) {\n                        subList = breakText(tempStr, width, font);\n                        Array.prototype.push.apply(list, subList.slice(0, subList.length - 1));\n                        preSubstr = subList[subList.length - 1];\n                    } else {\n                        preSubstr = tempStr;\n                    }\n                }\n            }\n            if (preSubstr) {// 加入最后空余串\n                list.push(preSubstr);\n            }\n        }\n    }\n    return list;\n};\n\n\nvar tl = formatText(content, {\n    font: font,\n    width: width,\n    height: height,\n    wordBreak: wordBreak\n});\nif (autoScale && tl.length * lineHeight > height) {\n    // find cache\n    var cacheKey = '' + width + '-' +height + font + lineHeight;\n    var cacheMap = data.a('cacheScaleMap');\n    var i = 0,\n        lineOffset = 0,\n        maxTry = 4,\n        scale, rs,\n        tempList, rlh, preRS, scaledWidth, scaledHeight;\n    vAlign = 'top';\n    // use cache\n    if (cacheMap && cacheMap.key === cacheKey && cacheMap.content === content) {\n        scale = cacheMap.scale;\n        rs = 1 / scale;\n        rlh = scale * lineHeight;\n\n        scaledWidth = parseInt(width * rs);\n        scaledHeight = parseInt(height * rs);\n\n        g.scale(scale, scale);\n\n        tl = formatText(content, {\n            font: font,\n            width: scaledWidth,\n            height: height,\n            wordBreak: wordBreak\n        });\n    }\n    else {\n        cacheMap = {\n            key: cacheKey,\n            content: content\n        };\n\n        while (i < maxTry) {// try\n            scale = Math.sqrt(height / ((tl.length + lineOffset) * lineHeight));\n            rs = 1 / scale;\n            rlh = scale * lineHeight;\n\n            scaledWidth = parseInt(width * rs);\n            scaledHeight = parseInt(height * rs);\n\n            if (preRS) {\n                g.scale(preRS, preRS);\n            }\n\n            g.scale(scale, scale);\n\n            tempList = formatText(content, {\n                font: font,\n                width: scaledWidth,\n                height: height,\n                wordBreak: wordBreak\n            });\n            if (tempList.length * rlh > height) {\n                lineOffset += Math.ceil((tempList.length * rlh - height) / rlh + 0.5);\n                preRS = rs;\n            }\n            else if (tempList.length * rlh < height && Math.abs(height - tempList.length * rlh) > rlh * 2) {\n                lineOffset -= Math.floor((height - tempList.length * rlh) / rlh);\n                preRS = rs;\n            }\n            else {\n                tl = tempList;\n                break;\n            }\n            if (++i === maxTry) {\n                tl = tempList;\n            }\n        }\n        cacheMap.scale = scale;\n        data.a('cacheScaleMap', cacheMap);\n    }\n\n    fx = paddingLeft * rs;\n    fy = paddingTop * rs;\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, scaledWidth, rlh, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\nelse if (fillContent && (tl.length + 1) * lineHeight < height) {\n    // find cache\n    var cacheKey = '' + width + '-' + height + font + lineHeight;\n    var cacheMap = data.a('cacheScaleMap');\n    var i = 0,\n        lineOffset = 0,\n        maxTry = 4,\n        scale, rs,\n        tempList, rlh, preRS, scaledWidth, scaledHeight;\n    vAlign = 'top';\n    // use cache\n    if (cacheMap && cacheMap.key === cacheKey && cacheMap.content === content) {\n        scale = cacheMap.scale;\n        rs = 1 / scale;\n        rlh = scale * lineHeight;\n\n        scaledWidth = parseInt(width * rs);\n        scaledHeight = parseInt(height * rs);\n\n        g.scale(scale, scale);\n\n        tl = formatText(content, {\n            font: font,\n            width: scaledWidth,\n            height: height,\n            wordBreak: wordBreak\n        });\n    }\n    else {\n        var currScale = Math.sqrt(height / (tl.length * lineHeight));\n        cacheMap = {\n            key: cacheKey,\n            content: content\n        };\n\n        while (i < maxTry) {// try\n            scale = currScale;\n            rs = 1 / scale;\n            rlh = scale * lineHeight;\n\n            scaledWidth = parseInt(width * rs);\n            scaledHeight = parseInt(height * rs);\n\n            if (preRS) {\n                g.scale(preRS, preRS);\n            }\n\n            g.scale(scale, scale);\n\n            tempList = formatText(content, {\n                font: font,\n                width: scaledWidth,\n                height: height,\n                wordBreak: wordBreak\n            });\n            if (tempList.length * rlh > height || (tempList.length * rlh < height && height - tempList.length * rlh > rlh * 0.8)) {\n                preRS = rs;\n                currScale *= Math.sqrt(height / (tempList.length * rlh));\n            }\n            else {\n                tl = tempList;\n                break;\n            }\n            if (++i === maxTry) {\n                tl = tempList;\n            }\n        }\n        cacheMap.scale = scale;\n        data.a('cacheScaleMap', cacheMap);\n    }\n\n    fx = paddingLeft * rs;\n    fy = paddingTop * rs;\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, scaledWidth, rlh, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\nelse {\n    // set y by vAlign\n    if (vAlign === 'middle') {\n        fy += (height - tl.length * lineHeight) / 2;\n    } else if (vAlign === 'bottom') {\n        fy += (height - tl.length * lineHeight);\n    }\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, width, lineHeight, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\ng.restore();\n}",
          "properties": {
            "content": {
              "valueType": "Multiline",
              "defaultValue": "HT 2D Editor",
              "name": "TBContent"
            },
            "autoScale": {
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "TBAutoScale"
            },
            "wordBreak": {
              "valueType": "Boolean",
              "defaultValue": false,
              "name": "TBWordBreak"
            },
            "fontSize": {
              "valueType": "PositiveNumber",
              "defaultValue": 14,
              "name": "TBFontSize"
            },
            "fontFamily": {
              "valueType": "String",
              "defaultValue": "sans-serif, arial",
              "name": "TBFontFamily"
            },
            "textAlign": {
              "valueType": "Align",
              "defaultValue": "left",
              "name": "TBTextAlign"
            },
            "vAlign": {
              "valueType": "VAlign",
              "defaultValue": "middle",
              "name": "TBVerticalAlign"
            },
            "color": {
              "valueType": "Color",
              "defaultValue": "rgb(0,0,0)",
              "name": "TBColor"
            },
            "lineHeight": {
              "valueType": "PositiveNumber",
              "defaultValue": 18,
              "name": "TBLineHeight"
            },
            "background": {
              "valueType": "Color",
              "defaultValue": null,
              "name": "TBBackground"
            },
            "padding": {
              "valueType": "String",
              "defaultValue": "0",
              "name": "TBPadding",
              "description": "like CSS"
            },
            "fillContent": {
              "valueType": "Boolean",
              "defaultValue": true,
              "name": "占整个矩形"
            }
          }
        },
        "width": {
          "value": 100,
          "isSafeFunc": true,
          "func": "__ht__function(i){return i._width}"
        },
        "height": {
          "value": 100,
          "isSafeFunc": true,
          "func": "__ht__function(i){return i._height}"
        },
        "comps": [
          {
            "type": {
              "func": "__ht__function(i){return i.compType}",
              "isSafeFunc": true
            },
            "content": {
              "func": "style@content"
            },
            "autoScale": {
              "func": "style@autoScale"
            },
            "wordBreak": {
              "func": "style@wordBreak"
            },
            "fontSize": {
              "func": "style@fontSize"
            },
            "fontFamily": {
              "func": "style@fontFamily"
            },
            "textAlign": {
              "func": "style@textAlign"
            },
            "vAlign": {
              "func": "style@vAlign"
            },
            "color": {
              "func": "style@color"
            },
            "lineHeight": {
              "func": "style@lineHeight"
            },
            "background": {
              "func": "style@background"
            },
            "padding": {
              "func": "style@padding"
            },
            "fillContent": {
              "func": "style@fillContent"
            },
            "getValue": "__ht__function(V){var d=u(E,V);if(d===M&&g.properties){var f=g.properties[V];f&&(d=f.defaultValue)}return d}",
            "getColor": "__ht__function(P){return A(E.getValue(P))}"
          }
        ]
      },
      "pixelPerfect": true,
      "displayName": "textBox",
      "rect": [
        11.61067,
        273.70738,
        17,
        164.012
      ]
    },
    {
      "type": "text",
      "text": "습도",
      "color": "rgb(247,247,247)",
      "font": "18px Godo",
      "pixelPerfect": true,
      "rect": [
        63.53394,
        369.50266,
        74.98543,
        15.20288
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@humidity",
        "value": "75%"
      },
      "color": "#32D3EB",
      "font": "20px arial, sans-serif",
      "pixelPerfect": true,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        121.53697,
        415.30907,
        50.51079,
        18.61176
      ]
    },
    {
      "type": "text",
      "text": "상부 전원 :",
      "color": "rgb(247,247,247)",
      "font": "18px Godo",
      "pixelPerfect": true,
      "rect": [
        31.57586,
        26.47439,
        87.92414,
        21.49051
      ]
    },
    {
      "type": "text",
      "text": "주 변환 모델 :",
      "color": "rgb(247,247,247)",
      "font": "18px Godo",
      "pixelPerfect": true,
      "rect": [
        32.93968,
        150.27011,
        86.56032,
        20.43969
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@powerSupply",
        "value": "110±2×2.5%/10.5kV "
      },
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "shadowColor": "#32D3EB",
      "pixelPerfect": true,
      "rect": [
        48.95634,
        178.31337,
        138.35967,
        25.022
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@powerSupply",
        "value": "50/63MVA Dyn11"
      },
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "shadowColor": "#32D3EB",
      "pixelPerfect": true,
      "rect": [
        49.33896,
        196.08834,
        138.35967,
        25.022
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@superPower",
        "value": "중탄도변전소"
      },
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "shadowColor": "#32D3EB",
      "pixelPerfect": true,
      "rect": [
        50.57586,
        52.11464,
        134.32533,
        21.74206
      ]
    },
    {
      "type": "text",
      "text": "전력 공급 방식 :",
      "color": "rgb(247,247,247)",
      "font": "18px Godo",
      "pixelPerfect": true,
      "rect": [
        31.57586,
        78.00644,
        86.56032,
        23.19375
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@powerSupply",
        "value": "편모선 분할"
      },
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "shadowColor": "#32D3EB",
      "pixelPerfect": true,
      "rect": [
        50.57586,
        105.34994,
        138.35967,
        25.022
      ]
    },
    {
      "type": "text",
      "text": "전압 레벨",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "14px Godo",
      "pixelPerfect": true,
      "rect": [
        45.40953,
        499.87387,
        74.34617,
        18.39528
      ]
    },
    {
      "type": "shape",
      "background": "rgba(215,215,222,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "rotation": 3.14159,
      "points": [
        56.90411,
        586.07767,
        56.90411,
        584.24532,
        197.99509,
        584.24532,
        197.99509,
        586.07767
      ]
    },
    {
      "type": "shape",
      "background": "rgba(215,215,222,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "rotation": 1.5708,
      "points": [
        85.43522,
        533.6577,
        85.43522,
        531.82535,
        169.46397,
        531.82535,
        169.46397,
        533.6577
      ]
    },
    {
      "type": "shape",
      "background": "rgba(215,215,222,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "rotation": 1.5708,
      "points": [
        85.43522,
        638.49763,
        85.43522,
        636.66528,
        169.46397,
        636.66528,
        169.46397,
        638.49763
      ]
    },
    {
      "type": "image",
      "name": "symbols/温度 (1).json",
      "displayName": "温度 (1)",
      "rect": [
        60.3875,
        292.41646,
        40.63916,
        40.63916
      ]
    },
    {
      "type": "image",
      "name": "symbols/湿度.json",
      "displayName": "湿度",
      "rect": [
        69.52055,
        399.68706,
        38.03233,
        38.03233
      ]
    },
    {
      "type": "text",
      "text": "지",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "18px arial, sans-serif",
      "pixelPerfect": true,
      "rect": [
        8.4799,
        297.53316,
        22.54774,
        15.20288
      ]
    },
    {
      "type": "text",
      "text": "역",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "18px arial, sans-serif",
      "pixelPerfect": true,
      "rect": [
        8.4799,
        333.63759,
        22.54774,
        15.20288
      ]
    },
    {
      "type": "text",
      "text": "정",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "18px arial, sans-serif",
      "pixelPerfect": true,
      "rect": [
        8.4799,
        369.74202,
        22.54774,
        15.20288
      ]
    },
    {
      "type": "text",
      "text": "보",
      "align": "center",
      "color": "rgb(247,247,247)",
      "font": "18px arial, sans-serif",
      "pixelPerfect": true,
      "rect": [
        8.4799,
        405.84645,
        22.54774,
        15.20288
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@DCScreen",
        "value": "110KV"
      },
      "align": "center",
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        56.27422,
        524.5185,
        51.83457,
        24.14353
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@DCScreen",
        "value": "10KV"
      },
      "align": "center",
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "pixelPerfect": true,
      "anchorX": 0.2884,
      "anchorY": 0.35576,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        56.27422,
        545.5185,
        51.83457,
        24.14353
      ]
    },
    {
      "type": "shape",
      "background": "rgba(20,20,61,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "points": [
        44.87668,
        758.33281,
        28.61067,
        748.01472,
        28.61067,
        696.93757,
        213.8873,
        696.93757,
        228.12087,
        711.23648,
        228.12087,
        758.33281,
        44.87668,
        758.33281
      ]
    },
    {
      "type": "text",
      "text": "A단 이음 :",
      "color": "rgb(247,247,247)",
      "font": "18px Godo",
      "pixelPerfect": true,
      "rect": [
        42.08395,
        698.93757,
        90.09322,
        25.40137
      ]
    },
    {
      "type": "shape",
      "background": "rgba(20,20,61,0.40)",
      "borderColor": "rgba(76,205,252,0.50)",
      "pixelPerfect": true,
      "points": [
        44.87668,
        824.50811,
        28.61067,
        814.66618,
        28.61067,
        765.94612,
        213.88731,
        765.94612,
        228.12087,
        779.58517,
        228.12087,
        824.50811,
        44.87668,
        824.50811
      ]
    },
    {
      "type": "text",
      "text": "B단 이음 :",
      "color": "rgb(247,247,247)",
      "font": "18px Godo",
      "pixelPerfect": true,
      "rect": [
        42.08395,
        767.94612,
        77.67174,
        22.82145
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@aDifferentSound",
        "value": "A단 이음"
      },
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "pixelPerfect": true,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        85.81419,
        730.64936,
        117.64427,
        23.34859
      ]
    },
    {
      "type": "text",
      "text": {
        "func": "attr@bDifferentSound",
        "value": "B단 이음"
      },
      "color": "#32D3EB",
      "font": "16px arial, sans-serif",
      "pixelPerfect": true,
      "scaleX": 1.2,
      "scaleY": 1.2,
      "rect": [
        86.25645,
        794.18006,
        122.06687,
        24.12493
      ]
    }
  ]
}